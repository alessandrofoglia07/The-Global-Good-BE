service: TheGlobalGood-serverless
frameworkVersion: '3'

useDotenv: true

provider:
    name: aws
    runtime: nodejs20.x
    region: us-west-1
    httpApi:
        authorizers:
            jwtCognitoAuthorizer:
                type: jwt
                identitySource: $request.header.Authorization
                issuerUrl: ${env:ISSUER_URL}
                audience:
                    - ${env:AUDIENCE}
        cors:
            allowedOrigins:
                - ${env:CLIENT_BASE_URL}
            allowCredentials: true

package:
    individually: true

functions:
    queryProducts:
        handler: src/products/queryProducts.handler
        events:
            - httpApi:
                  path: /products
                  method: get
        iamRoleStatements:
            - Effect: 'Allow'
              Action:
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
              Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:DYNAMODB_PRODUCTS_TABLE_NAME}'
    getProduct:
        handler: src/products/getProduct.handler
        events:
            - httpApi:
                  path: /product/{collection}/{name}
                  method: get
        iamRoleStatements:
            - Effect: 'Allow'
              Action:
                  - 'dynamodb:GetItem'
              Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:DYNAMODB_PRODUCTS_TABLE_NAME}'
    getMultipleProducts:
        handler: src/products/getMultipleProducts.handler
        events:
            - httpApi:
                  path: /product/multiple
                  method: get
        iamRoleStatements:
            - Effect: 'Allow'
              Action:
                  - 'dynamodb:BatchGetItem'
              Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:DYNAMODB_PRODUCTS_TABLE_NAME}'
    getReviewsOfProduct:
        handler: src/reviews/getReviewsOfProduct.handler
        events:
            - httpApi:
                  path: /product/{collection}/{name}/review
                  method: get
        iamRoleStatements:
            - Effect: 'Allow'
              Action:
                  - 'dynamodb:Query'
              Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:DYNAMODB_REVIEWS_TABLE_NAME}'
    createReview:
        handler: src/reviews/createReview.handler
        events:
            - httpApi:
                  path: /product/{collection}/{name}/review
                  method: post
                  authorizer:
                      name: jwtCognitoAuthorizer
        iamRoleStatements:
            - Effect: 'Allow'
              Action:
                  - 'dynamodb:PutItem'
              Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:DYNAMODB_REVIEWS_TABLE_NAME}'

plugins:
    - serverless-esbuild
    - serverless-iam-roles-per-function
    - serverless-dotenv-plugin

custom:
    esbuild:
        packager: pnpm
        bundle: true
        minify: true
        keepNames: true
    dotenv:
        exclude:
            - ISSUER_URL
            - AUDIENCE
        required:
            file: true
